package se.yrgo.dataaccess;

import java.sql.*;
import java.util.*;
import java.util.Date;

import org.springframework.jdbc.core.*;

import se.yrgo.domain.*;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
	//CUSTOMER
	private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
	private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
	private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?, ?)";
	
	private static final String GET_INCOMPLETE_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE COMPANY_NAME=?";
	private static final String GET_CUSTOMER_BY_ID = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE CUSTOMER_ID=?";
	private static final String GET_ALL_CUSTOMERS = "SELECT * FROM CUSTOMER";

	//TBL_CALL
	private static final String INSERT_SQL_CALL = "INSERT INTO TBL_CALL (TIME_AND_DATE, NOTES, CUSTOMER_ID) VALUES (?, ?, ?)";
	private static final String GET_CALL_BY_CUSTOMERID = "SELECT * FROM TBL_CALL where CUSTOMER_ID=?";

	private JdbcTemplate template;

	public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
		this.template = template;
	}

	private void createTables() {
		// template.update("ALTER TABLE TBL_CALL ADD CUSTOMER_ID VARCHAR(255)");
		try {
			template.update(
					"CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(255), COMPANY_NAME VARCHAR(255), EMAIL VARCHAR(255), TELEPHONE VARCHAR(255), NOTES VARCHAR(255))");
			// instead of CALL, the table is named TBL_CALL
			template.update(
					"CREATE TABLE TBL_CALL (CALL_ID integer generated by default as identity (start with 1), TIME_AND_DATE DATE, NOTES VARCHAR(255), CUSTOMER_ID VARCHAR(255))");
		} catch (Exception e) {
			System.out.println("Assuming the Customer table exists");
		}
	}

	@Override
	public void create(Customer customer) {
		template.update(INSERT_SQL, customer.getCustomerId(), customer.getCompanyName(), customer.getEmail(),
				customer.getTelephone(), customer.getNotes());
	}

	@Override
	public Customer getById(String customerId) throws RecordNotFoundException {
		List<Customer> customer = this.template.query(GET_CUSTOMER_BY_ID, new CustomerRowMapper(), customerId);
		return customer.get(0);// there should only be one
	}

	@Override
	public List<Customer> getByName(String name) {
		return this.template.query(GET_INCOMPLETE_SQL, new CustomerRowMapper(), name);
	}

	@Override
	public void update(Customer customerToUpdate) throws RecordNotFoundException {
		this.template.update(UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getEmail(),
				customerToUpdate.getTelephone(), customerToUpdate.getNotes(), customerToUpdate.getCustomerId());
	}

	@Override
	public void delete(Customer oldCustomer) throws RecordNotFoundException {
		this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
	}

	@Override
	public List<Customer> getAllCustomers() {
		return this.template.query(GET_ALL_CUSTOMERS, new CustomerRowMapper());
	}

	@Override
	public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
		Customer customer = getById(customerId);
		List<Call> calls = template.query(GET_CALL_BY_CUSTOMERID, new CallRowMapper(),customerId);

		customer.setCalls(calls);

		return customer;
	}

	@Override
	public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
		template.update(INSERT_SQL_CALL, newCall.getTimeAndDate(), newCall.getNotes(), customerId);
	}
}

class CustomerRowMapper implements RowMapper<Customer> {
	public Customer mapRow(ResultSet rs, int arg1) throws SQLException {
		String customerId = rs.getString(1);
		String companyName = rs.getString(2);
		String email = rs.getString(3);
		String telephone = rs.getString(4);
		String notes = rs.getString(5);

		return new Customer(customerId, companyName, email, telephone, notes);
	}
}

class CallRowMapper implements RowMapper<Call> {
	public Call mapRow(ResultSet rs, int arg1) throws SQLException {
		String notes = rs.getString(1);
		Date timeAndDate = rs.getDate(2);

		return new Call(notes, timeAndDate);
	}
}